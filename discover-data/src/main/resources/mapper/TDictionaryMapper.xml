<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.ninini.code.dao.mysql.TDictionaryMapper">
  <resultMap id="BaseResultMap" type="net.ninini.code.entity.po.TDictionary">
    <id column="class_key" jdbcType="VARCHAR" property="classKey" />
    <result column="class_desc" jdbcType="VARCHAR" property="classDesc" />
    <result column="item_key" jdbcType="VARCHAR" property="itemKey" />
    <result column="item_desc" jdbcType="VARCHAR" property="itemDesc" />
    <result column="item_sort" jdbcType="INTEGER" property="itemSort" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    class_key, class_desc, item_key, item_desc, item_sort
  </sql>
  <select id="selectByExample" parameterType="net.ninini.code.entity.po.TDictionaryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_dictionary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_dictionary
    where class_key = #{classKey,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from t_dictionary
    where class_key = #{classKey,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="net.ninini.code.entity.po.TDictionaryExample">
    delete from t_dictionary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.ninini.code.entity.po.TDictionary">
    insert into t_dictionary (class_key, class_desc, item_key, 
      item_desc, item_sort)
    values (#{classKey,jdbcType=VARCHAR}, #{classDesc,jdbcType=VARCHAR}, #{itemKey,jdbcType=VARCHAR}, 
      #{itemDesc,jdbcType=VARCHAR}, #{itemSort,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="net.ninini.code.entity.po.TDictionary">
    insert into t_dictionary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="classKey != null">
        class_key,
      </if>
      <if test="classDesc != null">
        class_desc,
      </if>
      <if test="itemKey != null">
        item_key,
      </if>
      <if test="itemDesc != null">
        item_desc,
      </if>
      <if test="itemSort != null">
        item_sort,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="classKey != null">
        #{classKey,jdbcType=VARCHAR},
      </if>
      <if test="classDesc != null">
        #{classDesc,jdbcType=VARCHAR},
      </if>
      <if test="itemKey != null">
        #{itemKey,jdbcType=VARCHAR},
      </if>
      <if test="itemDesc != null">
        #{itemDesc,jdbcType=VARCHAR},
      </if>
      <if test="itemSort != null">
        #{itemSort,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="net.ninini.code.entity.po.TDictionaryExample" resultType="java.lang.Long">
    select count(*) from t_dictionary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_dictionary
    <set>
      <if test="record.classKey != null">
        class_key = #{record.classKey,jdbcType=VARCHAR},
      </if>
      <if test="record.classDesc != null">
        class_desc = #{record.classDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.itemKey != null">
        item_key = #{record.itemKey,jdbcType=VARCHAR},
      </if>
      <if test="record.itemDesc != null">
        item_desc = #{record.itemDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.itemSort != null">
        item_sort = #{record.itemSort,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_dictionary
    set class_key = #{record.classKey,jdbcType=VARCHAR},
      class_desc = #{record.classDesc,jdbcType=VARCHAR},
      item_key = #{record.itemKey,jdbcType=VARCHAR},
      item_desc = #{record.itemDesc,jdbcType=VARCHAR},
      item_sort = #{record.itemSort,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="net.ninini.code.entity.po.TDictionary">
    update t_dictionary
    <set>
      <if test="classDesc != null">
        class_desc = #{classDesc,jdbcType=VARCHAR},
      </if>
      <if test="itemKey != null">
        item_key = #{itemKey,jdbcType=VARCHAR},
      </if>
      <if test="itemDesc != null">
        item_desc = #{itemDesc,jdbcType=VARCHAR},
      </if>
      <if test="itemSort != null">
        item_sort = #{itemSort,jdbcType=INTEGER},
      </if>
    </set>
    where class_key = #{classKey,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.ninini.code.entity.po.TDictionary">
    update t_dictionary
    set class_desc = #{classDesc,jdbcType=VARCHAR},
      item_key = #{itemKey,jdbcType=VARCHAR},
      item_desc = #{itemDesc,jdbcType=VARCHAR},
      item_sort = #{itemSort,jdbcType=INTEGER}
    where class_key = #{classKey,jdbcType=VARCHAR}
  </update>
</mapper>