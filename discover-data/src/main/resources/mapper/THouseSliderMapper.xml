<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.ninini.code.dao.mysql.THouseSliderMapper">
  <resultMap id="BaseResultMap" type="net.ninini.code.entity.po.THouseSlider">
    <id column="pid" jdbcType="BIGINT" property="pid" />
    <result column="house_pid" jdbcType="BIGINT" property="housePid" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="net.ninini.code.entity.po.THouseSlider">
    <result column="image_uri" jdbcType="LONGVARCHAR" property="imageUri" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    pid, house_pid, sort
  </sql>
  <sql id="Blob_Column_List">
    image_uri
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="net.ninini.code.entity.po.THouseSliderExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_house_slider
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="net.ninini.code.entity.po.THouseSliderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_house_slider
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_house_slider
    where pid = #{pid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_house_slider
    where pid = #{pid,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="net.ninini.code.entity.po.THouseSliderExample">
    delete from t_house_slider
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.ninini.code.entity.po.THouseSlider">
    insert into t_house_slider (pid, house_pid, sort, 
      image_uri)
    values (#{pid,jdbcType=BIGINT}, #{housePid,jdbcType=BIGINT}, #{sort,jdbcType=INTEGER}, 
      #{imageUri,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="net.ninini.code.entity.po.THouseSlider">
    insert into t_house_slider
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="pid != null">
        pid,
      </if>
      <if test="housePid != null">
        house_pid,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="imageUri != null">
        image_uri,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="pid != null">
        #{pid,jdbcType=BIGINT},
      </if>
      <if test="housePid != null">
        #{housePid,jdbcType=BIGINT},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="imageUri != null">
        #{imageUri,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="net.ninini.code.entity.po.THouseSliderExample" resultType="java.lang.Long">
    select count(*) from t_house_slider
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_house_slider
    <set>
      <if test="record.pid != null">
        pid = #{record.pid,jdbcType=BIGINT},
      </if>
      <if test="record.housePid != null">
        house_pid = #{record.housePid,jdbcType=BIGINT},
      </if>
      <if test="record.sort != null">
        sort = #{record.sort,jdbcType=INTEGER},
      </if>
      <if test="record.imageUri != null">
        image_uri = #{record.imageUri,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update t_house_slider
    set pid = #{record.pid,jdbcType=BIGINT},
      house_pid = #{record.housePid,jdbcType=BIGINT},
      sort = #{record.sort,jdbcType=INTEGER},
      image_uri = #{record.imageUri,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_house_slider
    set pid = #{record.pid,jdbcType=BIGINT},
      house_pid = #{record.housePid,jdbcType=BIGINT},
      sort = #{record.sort,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="net.ninini.code.entity.po.THouseSlider">
    update t_house_slider
    <set>
      <if test="housePid != null">
        house_pid = #{housePid,jdbcType=BIGINT},
      </if>
      <if test="sort != null">
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="imageUri != null">
        image_uri = #{imageUri,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where pid = #{pid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="net.ninini.code.entity.po.THouseSlider">
    update t_house_slider
    set house_pid = #{housePid,jdbcType=BIGINT},
      sort = #{sort,jdbcType=INTEGER},
      image_uri = #{imageUri,jdbcType=LONGVARCHAR}
    where pid = #{pid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.ninini.code.entity.po.THouseSlider">
    update t_house_slider
    set house_pid = #{housePid,jdbcType=BIGINT},
      sort = #{sort,jdbcType=INTEGER}
    where pid = #{pid,jdbcType=BIGINT}
  </update>
</mapper>